class e extends HTMLElement{async connectedCallback(){await this._loadRoutes();const e=1==this.routesDef["auto-nav"]?"./crs-url-provider.js":"./crs-static-provider.js",t=await import(e);this._provider=new t.NavigationProvider(this)}disconnectedCallback(){this.routesDef=null,this._provider.dispose(),this._provider=null}async goto(e,t,i="view"){const s=this.routesDef.routes.find(t=>t[i]===e);if(null==s)return this._loadView({title:"404",hash:"#404",view:"404","html-only":!0});await this._loadView(s),null!=this.viewModel&&(this.viewModel.element=this,this.viewModel.parameters=t||await async function(e){const t=e.split("?"),i={url:e,hash:t[0]};if(1==t.length)return i;const s={},o=t[1].split("&");for(let e of o){const t=e.split("=");s[t[0]]=t[1]}return i.parameters=s,i}(window.location.hash).parameters,this.viewModel.connectedCallback&&this.viewModel.connectedCallback(),null!=this.viewModel.parameters&&this.viewModel.parametersChanged&&this.viewModel.parametersChanged(this.viewModel.parameters))}async _loadRoutes(){const e=this.getAttribute("routes")||"/app/routes.json";return fetch(e).then(e=>e.text()).then(e=>this.routesDef=JSON.parse(e))}async _loadView(e){null!=this.viewModel&&(this.viewModel.disconnectedCallback(),this.viewModel.element=null,this.viewModel=null);const t=this.routesDef.root||"app",i=await fetch(`/${t}/${e.view}/${e.view}.html`).then(e=>e.text());if(this.innerHTML=i,1!=e["html-only"]){const i=await import(`/${t}/${e.view}/${e.view}.js`);this.viewModel=new i.default}}}customElements.define("crs-router",e);
